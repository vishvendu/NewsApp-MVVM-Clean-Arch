// Generated by Dagger (https://dagger.dev).
package com.vishvendu.cleanarch.newsapp.di.module;

import com.vishvendu.cleanarch.newsapp.data.api.NetworkService;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.converter.gson.GsonConverterFactory;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata("com.vishvendu.cleanarch.newsapp.di.NetworkBASEURL")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ApplicationModule_ProvideNetworkServiceFactory implements Factory<NetworkService> {
  private final ApplicationModule module;

  private final Provider<String> baseurlProvider;

  private final Provider<GsonConverterFactory> gsonConverterFactoryProvider;

  private final Provider<OkHttpClient> okHttpClientProvider;

  public ApplicationModule_ProvideNetworkServiceFactory(ApplicationModule module,
      Provider<String> baseurlProvider, Provider<GsonConverterFactory> gsonConverterFactoryProvider,
      Provider<OkHttpClient> okHttpClientProvider) {
    this.module = module;
    this.baseurlProvider = baseurlProvider;
    this.gsonConverterFactoryProvider = gsonConverterFactoryProvider;
    this.okHttpClientProvider = okHttpClientProvider;
  }

  @Override
  public NetworkService get() {
    return provideNetworkService(module, baseurlProvider.get(), gsonConverterFactoryProvider.get(), okHttpClientProvider.get());
  }

  public static ApplicationModule_ProvideNetworkServiceFactory create(ApplicationModule module,
      Provider<String> baseurlProvider, Provider<GsonConverterFactory> gsonConverterFactoryProvider,
      Provider<OkHttpClient> okHttpClientProvider) {
    return new ApplicationModule_ProvideNetworkServiceFactory(module, baseurlProvider, gsonConverterFactoryProvider, okHttpClientProvider);
  }

  public static NetworkService provideNetworkService(ApplicationModule instance, String baseurl,
      GsonConverterFactory gsonConverterFactory, OkHttpClient okHttpClient) {
    return Preconditions.checkNotNullFromProvides(instance.provideNetworkService(baseurl, gsonConverterFactory, okHttpClient));
  }
}
