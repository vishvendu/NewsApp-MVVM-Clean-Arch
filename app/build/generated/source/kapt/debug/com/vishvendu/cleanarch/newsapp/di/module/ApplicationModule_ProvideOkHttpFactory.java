// Generated by Dagger (https://dagger.dev).
package com.vishvendu.cleanarch.newsapp.di.module;

import com.vishvendu.cleanarch.newsapp.data.api.APIKeyInterceptor;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ApplicationModule_ProvideOkHttpFactory implements Factory<OkHttpClient> {
  private final ApplicationModule module;

  private final Provider<APIKeyInterceptor> provideAPIKeyInterceptorProvider;

  public ApplicationModule_ProvideOkHttpFactory(ApplicationModule module,
      Provider<APIKeyInterceptor> provideAPIKeyInterceptorProvider) {
    this.module = module;
    this.provideAPIKeyInterceptorProvider = provideAPIKeyInterceptorProvider;
  }

  @Override
  public OkHttpClient get() {
    return provideOkHttp(module, provideAPIKeyInterceptorProvider.get());
  }

  public static ApplicationModule_ProvideOkHttpFactory create(ApplicationModule module,
      Provider<APIKeyInterceptor> provideAPIKeyInterceptorProvider) {
    return new ApplicationModule_ProvideOkHttpFactory(module, provideAPIKeyInterceptorProvider);
  }

  public static OkHttpClient provideOkHttp(ApplicationModule instance,
      APIKeyInterceptor provideAPIKeyInterceptor) {
    return Preconditions.checkNotNullFromProvides(instance.provideOkHttp(provideAPIKeyInterceptor));
  }
}
