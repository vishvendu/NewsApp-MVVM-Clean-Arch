// Generated by Dagger (https://dagger.dev).
package com.vishvendu.cleanarch.newsapp.di.component;

import android.content.Context;
import com.google.gson.Gson;
import com.vishvendu.cleanarch.newsapp.MyNewsApplication;
import com.vishvendu.cleanarch.newsapp.data.api.APIKeyInterceptor;
import com.vishvendu.cleanarch.newsapp.data.api.NetworkService;
import com.vishvendu.cleanarch.newsapp.data.local.JsonHelper;
import com.vishvendu.cleanarch.newsapp.data.local.db.NewsDataBase;
import com.vishvendu.cleanarch.newsapp.data.repository.NewsSourcesRepository;
import com.vishvendu.cleanarch.newsapp.data.repository.NewsSourcesRepository_Factory;
import com.vishvendu.cleanarch.newsapp.data.repository.TopHeadlineRepository;
import com.vishvendu.cleanarch.newsapp.data.repository.TopHeadlineRepository_Factory;
import com.vishvendu.cleanarch.newsapp.di.module.ApplicationModule;
import com.vishvendu.cleanarch.newsapp.di.module.ApplicationModule_ProvideAPIKeyInterceptorFactory;
import com.vishvendu.cleanarch.newsapp.di.module.ApplicationModule_ProvideApiKeyFactory;
import com.vishvendu.cleanarch.newsapp.di.module.ApplicationModule_ProvideBaseURLFactory;
import com.vishvendu.cleanarch.newsapp.di.module.ApplicationModule_ProvideContextFactory;
import com.vishvendu.cleanarch.newsapp.di.module.ApplicationModule_ProvideCountryJsonHelperFactory;
import com.vishvendu.cleanarch.newsapp.di.module.ApplicationModule_ProvideDispatcherFactory;
import com.vishvendu.cleanarch.newsapp.di.module.ApplicationModule_ProvideGsonConverterFactoryFactory;
import com.vishvendu.cleanarch.newsapp.di.module.ApplicationModule_ProvideGsonFactory;
import com.vishvendu.cleanarch.newsapp.di.module.ApplicationModule_ProvideNetworkManagerFactory;
import com.vishvendu.cleanarch.newsapp.di.module.ApplicationModule_ProvideNetworkServiceFactory;
import com.vishvendu.cleanarch.newsapp.di.module.ApplicationModule_ProvideOkHttpFactory;
import com.vishvendu.cleanarch.newsapp.di.module.ApplicationModule_ProvideRoomDataBaseFactory;
import com.vishvendu.cleanarch.newsapp.utils.DefaultDispatcherProvider;
import com.vishvendu.cleanarch.newsapp.utils.NetworkManager;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.converter.gson.GsonConverterFactory;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerApplicationComponent {
  private DaggerApplicationComponent() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private ApplicationModule applicationModule;

    private Builder() {
    }

    public Builder applicationModule(ApplicationModule applicationModule) {
      this.applicationModule = Preconditions.checkNotNull(applicationModule);
      return this;
    }

    public ApplicationComponent build() {
      Preconditions.checkBuilderRequirement(applicationModule, ApplicationModule.class);
      return new ApplicationComponentImpl(applicationModule);
    }
  }

  private static final class ApplicationComponentImpl implements ApplicationComponent {
    private final ApplicationModule applicationModule;

    private final ApplicationComponentImpl applicationComponentImpl = this;

    private Provider<String> provideBaseURLProvider;

    private Provider<GsonConverterFactory> provideGsonConverterFactoryProvider;

    private Provider<APIKeyInterceptor> provideAPIKeyInterceptorProvider;

    private Provider<OkHttpClient> provideOkHttpProvider;

    private Provider<NetworkService> provideNetworkServiceProvider;

    private Provider<NetworkManager> provideNetworkManagerProvider;

    private Provider<JsonHelper> provideCountryJsonHelperProvider;

    private Provider<Gson> provideGsonProvider;

    private Provider<NewsDataBase> provideRoomDataBaseProvider;

    private Provider<TopHeadlineRepository> topHeadlineRepositoryProvider;

    private Provider<NewsSourcesRepository> newsSourcesRepositoryProvider;

    private Provider<DefaultDispatcherProvider> provideDispatcherProvider;

    private ApplicationComponentImpl(ApplicationModule applicationModuleParam) {
      this.applicationModule = applicationModuleParam;
      initialize(applicationModuleParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final ApplicationModule applicationModuleParam) {
      this.provideBaseURLProvider = ApplicationModule_ProvideBaseURLFactory.create(applicationModuleParam);
      this.provideGsonConverterFactoryProvider = DoubleCheck.provider(ApplicationModule_ProvideGsonConverterFactoryFactory.create(applicationModuleParam));
      this.provideAPIKeyInterceptorProvider = DoubleCheck.provider(ApplicationModule_ProvideAPIKeyInterceptorFactory.create(applicationModuleParam));
      this.provideOkHttpProvider = DoubleCheck.provider(ApplicationModule_ProvideOkHttpFactory.create(applicationModuleParam, provideAPIKeyInterceptorProvider));
      this.provideNetworkServiceProvider = DoubleCheck.provider(ApplicationModule_ProvideNetworkServiceFactory.create(applicationModuleParam, provideBaseURLProvider, provideGsonConverterFactoryProvider, provideOkHttpProvider));
      this.provideNetworkManagerProvider = DoubleCheck.provider(ApplicationModule_ProvideNetworkManagerFactory.create(applicationModuleParam));
      this.provideCountryJsonHelperProvider = DoubleCheck.provider(ApplicationModule_ProvideCountryJsonHelperFactory.create(applicationModuleParam));
      this.provideGsonProvider = DoubleCheck.provider(ApplicationModule_ProvideGsonFactory.create(applicationModuleParam));
      this.provideRoomDataBaseProvider = DoubleCheck.provider(ApplicationModule_ProvideRoomDataBaseFactory.create(applicationModuleParam));
      this.topHeadlineRepositoryProvider = DoubleCheck.provider(TopHeadlineRepository_Factory.create(provideNetworkServiceProvider, provideRoomDataBaseProvider, provideNetworkManagerProvider));
      this.newsSourcesRepositoryProvider = DoubleCheck.provider(NewsSourcesRepository_Factory.create(provideNetworkServiceProvider));
      this.provideDispatcherProvider = DoubleCheck.provider(ApplicationModule_ProvideDispatcherFactory.create(applicationModuleParam));
    }

    @Override
    public void inject(MyNewsApplication application) {
    }

    @Override
    public Context getContext() {
      return ApplicationModule_ProvideContextFactory.provideContext(applicationModule);
    }

    @Override
    public String getNetworkAPIKey() {
      return ApplicationModule_ProvideApiKeyFactory.provideApiKey(applicationModule);
    }

    @Override
    public String getNetworkBASEURL() {
      return ApplicationModule_ProvideBaseURLFactory.provideBaseURL(applicationModule);
    }

    @Override
    public NetworkService getNetworkService() {
      return provideNetworkServiceProvider.get();
    }

    @Override
    public NetworkManager getNetworkManager() {
      return provideNetworkManagerProvider.get();
    }

    @Override
    public JsonHelper getCountryJsonHelper() {
      return provideCountryJsonHelperProvider.get();
    }

    @Override
    public Gson getGSON() {
      return provideGsonProvider.get();
    }

    @Override
    public NewsDataBase getRoomDataBase() {
      return provideRoomDataBaseProvider.get();
    }

    @Override
    public TopHeadlineRepository getTopHeadlineRepository() {
      return topHeadlineRepositoryProvider.get();
    }

    @Override
    public NewsSourcesRepository getNewsSourcesRepository() {
      return newsSourcesRepositoryProvider.get();
    }

    @Override
    public DefaultDispatcherProvider getDispatcherProvider() {
      return provideDispatcherProvider.get();
    }
  }
}
