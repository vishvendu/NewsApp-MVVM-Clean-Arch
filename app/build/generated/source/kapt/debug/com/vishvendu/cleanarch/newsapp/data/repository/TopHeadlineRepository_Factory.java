// Generated by Dagger (https://dagger.dev).
package com.vishvendu.cleanarch.newsapp.data.repository;

import com.vishvendu.cleanarch.newsapp.data.api.NetworkService;
import com.vishvendu.cleanarch.newsapp.data.local.db.NewsDataBase;
import com.vishvendu.cleanarch.newsapp.utils.NetworkManager;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class TopHeadlineRepository_Factory implements Factory<TopHeadlineRepository> {
  private final Provider<NetworkService> networkServiceProvider;

  private final Provider<NewsDataBase> dbProvider;

  private final Provider<NetworkManager> networkManagerProvider;

  public TopHeadlineRepository_Factory(Provider<NetworkService> networkServiceProvider,
      Provider<NewsDataBase> dbProvider, Provider<NetworkManager> networkManagerProvider) {
    this.networkServiceProvider = networkServiceProvider;
    this.dbProvider = dbProvider;
    this.networkManagerProvider = networkManagerProvider;
  }

  @Override
  public TopHeadlineRepository get() {
    return newInstance(networkServiceProvider.get(), dbProvider.get(), networkManagerProvider.get());
  }

  public static TopHeadlineRepository_Factory create(
      Provider<NetworkService> networkServiceProvider, Provider<NewsDataBase> dbProvider,
      Provider<NetworkManager> networkManagerProvider) {
    return new TopHeadlineRepository_Factory(networkServiceProvider, dbProvider, networkManagerProvider);
  }

  public static TopHeadlineRepository newInstance(NetworkService networkService, NewsDataBase db,
      NetworkManager networkManager) {
    return new TopHeadlineRepository(networkService, db, networkManager);
  }
}
