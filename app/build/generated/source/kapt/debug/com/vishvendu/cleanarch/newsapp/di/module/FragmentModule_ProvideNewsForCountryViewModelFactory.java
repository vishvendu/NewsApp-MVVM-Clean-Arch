// Generated by Dagger (https://dagger.dev).
package com.vishvendu.cleanarch.newsapp.di.module;

import com.vishvendu.cleanarch.newsapp.data.repository.NewsForCountryRepository;
import com.vishvendu.cleanarch.newsapp.ui.viewmodel.NewsForCountryViewModel;
import com.vishvendu.cleanarch.newsapp.utils.DefaultDispatcherProvider;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class FragmentModule_ProvideNewsForCountryViewModelFactory implements Factory<NewsForCountryViewModel> {
  private final FragmentModule module;

  private final Provider<NewsForCountryRepository> newsForCountryRepositoryProvider;

  private final Provider<DefaultDispatcherProvider> dispatcherProvider;

  public FragmentModule_ProvideNewsForCountryViewModelFactory(FragmentModule module,
      Provider<NewsForCountryRepository> newsForCountryRepositoryProvider,
      Provider<DefaultDispatcherProvider> dispatcherProvider) {
    this.module = module;
    this.newsForCountryRepositoryProvider = newsForCountryRepositoryProvider;
    this.dispatcherProvider = dispatcherProvider;
  }

  @Override
  public NewsForCountryViewModel get() {
    return provideNewsForCountryViewModel(module, newsForCountryRepositoryProvider.get(), dispatcherProvider.get());
  }

  public static FragmentModule_ProvideNewsForCountryViewModelFactory create(FragmentModule module,
      Provider<NewsForCountryRepository> newsForCountryRepositoryProvider,
      Provider<DefaultDispatcherProvider> dispatcherProvider) {
    return new FragmentModule_ProvideNewsForCountryViewModelFactory(module, newsForCountryRepositoryProvider, dispatcherProvider);
  }

  public static NewsForCountryViewModel provideNewsForCountryViewModel(FragmentModule instance,
      NewsForCountryRepository newsForCountryRepository,
      DefaultDispatcherProvider dispatcherProvider) {
    return Preconditions.checkNotNullFromProvides(instance.provideNewsForCountryViewModel(newsForCountryRepository, dispatcherProvider));
  }
}
